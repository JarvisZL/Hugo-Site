<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on 浙语临湖</title>
    <link>https://jarviszly.com/blogs/</link>
    <description>Recent content in Blogs on 浙语临湖</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sun, 28 Jun 2020 14:13:54 +0800</lastBuildDate>
    
	<atom:link href="https://jarviszly.com/blogs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DatastructInproblemsolving</title>
      <link>https://jarviszly.com/blogs/datastructinproblemsolving/</link>
      <pubDate>Sun, 28 Jun 2020 14:13:54 +0800</pubDate>
      
      <guid>https://jarviszly.com/blogs/datastructinproblemsolving/</guid>
      <description>ADT  an ADT may be defined as a &amp;ldquo;class of objects whose logical behavior is defined by a set of values and a set of operations&amp;rdquo;  Stack  a stack is an abstract data type that serves as a collection of elements, with two principal operations:  push, which adds an element to the collection pop, which removes the most recently added element that was not yet removed.   the strattegy is LIFO(last in, first out).</description>
    </item>
    
    <item>
      <title>AlgorithmInproblemsolving</title>
      <link>https://jarviszly.com/blogs/algorithminproblemsolving/</link>
      <pubDate>Sat, 27 Jun 2020 17:06:38 +0800</pubDate>
      
      <guid>https://jarviszly.com/blogs/algorithminproblemsolving/</guid>
      <description>排序算法 快速排序  Quicksort is a divide-and-conquer algorithm. It works by selecting a &amp;lsquo;pivot&amp;rsquo; element from the array and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. The sub-arrays are then sorted recursively.  &amp; nums, int l, int r){ int val = nums[r]; int i = l-1; for(int j = l; j &amp; nums, int l, int r){ if(l sortArray(vector&amp; nums) { quicksort(nums,0,nums.</description>
    </item>
    
    <item>
      <title>Android Monkey Events</title>
      <link>https://jarviszly.com/blogs/android-monkey-events/</link>
      <pubDate>Tue, 23 Jun 2020 17:42:47 +0800</pubDate>
      
      <guid>https://jarviszly.com/blogs/android-monkey-events/</guid>
      <description>MonkeyActivityEvent MonkeyMoitionEvent  是一个抽象类  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  public abstract class MonkeyMotionEvent protected constructor (type: Int, private val mSource : Int, //the Type and mSource must be specified, as it defines what type the event is (e.g., EVENT_TYPE_TOUCH)  //and to which source (e.</description>
    </item>
    
    <item>
      <title>Android Monkey RunMonkeyCycles</title>
      <link>https://jarviszly.com/blogs/android-monkey-runmonkeycycles/</link>
      <pubDate>Tue, 23 Jun 2020 15:14:18 +0800</pubDate>
      
      <guid>https://jarviszly.com/blogs/android-monkey-runmonkeycycles/</guid>
      <description>run中调用runMonkeyCycles  在run函数中获取完对应的EventSource并validate之后，就会调用runMonkeyCycle函数开始执行event  1 2 3 4 5 6 7 8 9 10  mNetworkMonitor.start() var crashedAtCycle : Int try { /** where the magic happens*/ crashedAtCycle = runMonkeyCycles() } finally { //Release the rotation lock if it&amp;#39;s still held and restore the original orientation  MonkeyRotationEvent(Surface.ROTATION_0, false).injectEvent(mWm!!, mAm!!, mVerbose) } mNetworkMonitor.stop()   runMonkeyCycles  在进行一系列初始化之后进入循环  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67  while (!</description>
    </item>
    
    <item>
      <title>Android Monkey EventSource</title>
      <link>https://jarviszly.com/blogs/android-monkey-eventsource/</link>
      <pubDate>Wed, 17 Jun 2020 17:33:09 +0800</pubDate>
      
      <guid>https://jarviszly.com/blogs/android-monkey-eventsource/</guid>
      <description>run函数中申明不同的EventSource  脚本运行：命令中使用了-f且只有一个脚本则直接使用该脚本进行测试  1 2 3 4 5 6 7  mScriptFileNames.size == 1 -&amp;gt; { //script mode, ignore other options  mEventSource = MonkeySourceScript(mRandom!!, mScriptFileNames[0]!!, mThrottle, mRandomizeThrottle, mProfileWaitTime, mDeviceSleepTime) mEventSource.setVerbose(mVerbose) mCountEvents = false }    随机脚本运行：命令中使用了-f且包含多个脚本则随机运行这些脚本进行测试 如果有参数setup,则先运行带-setup的脚本用于配置环境等  1 2 3 4 5 6 7 8 9 10 11 12 13  mScriptFileNames.size &amp;gt; 1 -&amp;gt; { mEventSource = if (mSetupFileName != null) { mCount++ MonkeySourceRandomScript(mSetupFileName, mScriptFileNames, mThrottle, mRandomizeThrottle, mRandom!</description>
    </item>
    
    <item>
      <title>Android Monkey Run</title>
      <link>https://jarviszly.com/blogs/android-monkey-run/</link>
      <pubDate>Wed, 17 Jun 2020 13:48:36 +0800</pubDate>
      
      <guid>https://jarviszly.com/blogs/android-monkey-run/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Android Monkey GetMainApps</title>
      <link>https://jarviszly.com/blogs/android-monkey-getmainapps/</link>
      <pubDate>Tue, 16 Jun 2020 16:37:05 +0800</pubDate>
      
      <guid>https://jarviszly.com/blogs/android-monkey-getmainapps/</guid>
      <description>getMainApps函数 作用  根据命令中-p和-c参数来在设备中寻找符合条件的Activities.  代码分析 1 2 3 4 5 6 7 8 9 10 11 12  try{ mMainCategories.forEach { if (it == null) return@forEach val intent = Intent(Intent.ACTION_MAIN) if (it.isNotEmpty()) { intent.addCategory(it) } val mainApps = mPm!!.queryIntentActivities(intent, null, 0, UserHandle.myUserId()) ... } ... }    上述代码设置隐式的Intent,然后通过mpm查询设备中符合Intent这些属性的Activity放入mainApps中。 此处mainApps实际上是一个list&amp;lt;ResolveInfo&amp;gt;  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  try{ .</description>
    </item>
    
    <item>
      <title>买股票最大利润DP</title>
      <link>https://jarviszly.com/blogs/%E4%B9%B0%E8%82%A1%E7%A5%A8%E6%9C%80%E5%A4%A7%E5%88%A9%E6%B6%A6dp/</link>
      <pubDate>Sun, 07 Jun 2020 13:38:18 +0800</pubDate>
      
      <guid>https://jarviszly.com/blogs/%E4%B9%B0%E8%82%A1%E7%A5%A8%E6%9C%80%E5%A4%A7%E5%88%A9%E6%B6%A6dp/</guid>
      <description>彩票类题目描述  给定一个数组prices,第i项表示第i天买入或卖出彩票的价格，买入之前必须将当前手里的彩票卖出，一个买入卖出组合被称作一次交易，一共可以进行K次交易，最大利润是多少？  状态表示和转移  每天有买入，卖出，不操作三种情况，并且其中买入次数收到K的限制，所以需要确定下来天数i,当前剩余的买入次数k，和当日操作结束后是否拥有股票来确定唯一一个状态。  1 2 3 4 5  /* 状态表示 */ // 表示前i天共拥有k次交易次数且第i天操作结束后没有拥有股票时的最大利润。 dp[i][k][0]; // 表示前i天共拥有k次交易次数且第i天操作结束后拥有股票时的最大利润。 dp[i][k][1];    而对于第i天，其操作结束后是否拥有股票和第i-1天有关。  1 2 3 4 5 6 7 8 9 10 11 12 13 14  /* 状态转移 */ /* 第i天操作后不拥有股票： 第i-1天操作后不拥有股票，且第i天没有操作 第i-1天拥有股票且第i天卖出 */ dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i]); /* 第i天操作后拥有股票： 第i-1天操作后拥有股票，且第i天没有操作 第i-1天不拥有股票且第i天买入 */ dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i]); //此处用k表示剩余买入的次数，表示剩余卖出的次数结果一样。    考虑初始化状态，第0天的时候，如果操作后不拥有股票，说明没有操作，利润位0，反之如果第0天时还剩余交易次数，且操作后拥有股票则说明第0天买入，利润为0 - prices[0]。  1 2 3 4 5  for(int i = 0; i &amp;lt;= k; ++i){ dp[0][i][0] = 0; dp[0][i][1] = 0 - prices[0]; } dp[0][0][1] = INT_MIN; //(用INT_MIN表示不可能)   </description>
    </item>
    
    <item>
      <title>单词转换类题目</title>
      <link>https://jarviszly.com/blogs/%E5%8D%95%E8%AF%8D%E8%BD%AC%E6%8D%A2%E7%B1%BB%E9%A2%98%E7%9B%AE/</link>
      <pubDate>Wed, 06 May 2020 10:41:36 +0800</pubDate>
      
      <guid>https://jarviszly.com/blogs/%E5%8D%95%E8%AF%8D%E8%BD%AC%E6%8D%A2%E7%B1%BB%E9%A2%98%E7%9B%AE/</guid>
      <description>&lt;p&gt;leetcode 127 和 leetcode (51)433，大致题意就是给你一个开始字符串start，一个目标字符串end，以及一个字符串数组bank，需要找到一条最短的由start经过bank中的字符串到达end的转换路经，每次转换只能改变一个字符。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OJtemplate</title>
      <link>https://jarviszly.com/blogs/ojtemplate/</link>
      <pubDate>Sat, 11 Apr 2020 21:13:31 +0800</pubDate>
      
      <guid>https://jarviszly.com/blogs/ojtemplate/</guid>
      <description>&lt;p&gt;一些常用算法的模板&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Pair In Android And Java</title>
      <link>https://jarviszly.com/blogs/pairinandroidandjava/</link>
      <pubDate>Wed, 25 Mar 2020 10:45:04 +0800</pubDate>
      
      <guid>https://jarviszly.com/blogs/pairinandroidandjava/</guid>
      <description>&lt;p&gt;Pair在Android:(fab fa-android):和Java:(fab fa-java):中的异同点。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android UI控件Textview简介</title>
      <link>https://jarviszly.com/blogs/textviewinandroid/</link>
      <pubDate>Tue, 24 Mar 2020 22:40:56 +0800</pubDate>
      
      <guid>https://jarviszly.com/blogs/textviewinandroid/</guid>
      <description>&lt;p&gt;Android :(fab fa-android): UI控件Textview简单介绍。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Markdown 基本语法预览</title>
      <link>https://jarviszly.com/blogs/basic-markdown-preview/</link>
      <pubDate>Sun, 25 Aug 2019 16:22:42 +0800</pubDate>
      
      <guid>https://jarviszly.com/blogs/basic-markdown-preview/</guid>
      <description>&lt;p&gt;这是一篇用于预览 :(fab fa-markdown): Markdown 基本语法的文章。&lt;/p&gt;
&lt;p&gt;文章内容基于 &lt;a href=&#34;https://github.github.com/gfm&#34; target=&#34;_blank&#34;&gt;GitHub Flavored Markdown Spec&lt;/a&gt;
。&lt;/p&gt;
&lt;p&gt;不包含复杂的规则说明，仅仅展示 GFM 所约定的 Markdown 基本语法。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>